package com.ayogeshwaran.malwareappdetector.ui.home

import android.app.Application
import android.content.Context
import android.content.pm.ApplicationInfo
import android.content.pm.PackageInfo
import android.content.pm.PackageManager
import android.net.ConnectivityManager
import android.net.NetworkInfo
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.ayogeshwaran.malwareappdetector.model.AppInfo
import kotlinx.coroutines.*
import java.net.HttpURLConnection
import java.net.URL
import kotlin.system.measureTimeMillis

class HomeViewModel(private val app: Application) : AndroidViewModel(app) {
    private val logTag = "HomeViewModel"
    private val _legibleApps = MutableLiveData<List<AppInfo>>()
    val legibleApps: LiveData<List<AppInfo>> = _legibleApps

    fun getLegibleApps() {
        val pm: PackageManager = app.packageManager
        val packages = pm.getInstalledPackages(0)

        val timeTaken = measureTimeMillis {
            viewModelScope.launch {
                val deferredList = mutableListOf<Deferred<AppInfo>>()
                packages.forEach {
                    if (!isSystemApp(it)) {
                        deferredList.add(viewModelScope.async(Dispatchers.IO) {
                            getAppInfo(pm, it)
                        })
                    }
                }
                _legibleApps.postValue(deferredList.awaitAll())
            }
        }
        println("$logTag Time taken to scan all the apps - $timeTaken")
    }

    private fun getAppInfo(
        pm: PackageManager,
        it: PackageInfo
    ): AppInfo {
        val appName = pm.getApplicationLabel(it.applicationInfo)
        var appInfo: AppInfo?
        if (isInternetConnected(app.applicationContext)) {
            val response = pingUrl(playstoreBaseUrl + it.packageName)

            appInfo = AppInfo(appName.toString(), response)

            println("$logTag ${it.packageName}_${appName}_$response")
        } else {
            appInfo = AppInfo(appName.toString())

            println("$logTag ${it.packageName}_${appName}")
        }
        return appInfo
    }

    private fun isSystemApp(it: PackageInfo) : Boolean {
        return (it.applicationInfo.flags and ApplicationInfo.FLAG_SYSTEM) > 0
    }

    private fun pingUrl(url: String) : String {
        val urlObj = URL(url)
        val connection = urlObj.openConnection() as HttpURLConnection
        return connection.responseCode.toString()
    }
}

private fun isInternetConnected(context: Context): Boolean {
    val cm = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
    val activeNetwork: NetworkInfo? = cm.activeNetworkInfo
    return activeNetwork?.isConnectedOrConnecting == true
}

//// Trial1
// Default Dispatcher - HomeViewModel Time taken to scan all the apps - 10038
// IO Dispatcher - HomeViewModel Time taken to scan all the apps - 8468

//// Trial2
// Default Dispatcher - HomeViewModel Time taken to scan all the apps - 14276
// IO Dispatcher - HomeViewModel Time taken to scan all the apps - 13798

//// Trial3
// Default Dispatcher - HomeViewModel Time taken to scan all the apps - 11070
// IO Dispatcher - HomeViewModel Time taken to scan all the apps - 18406


