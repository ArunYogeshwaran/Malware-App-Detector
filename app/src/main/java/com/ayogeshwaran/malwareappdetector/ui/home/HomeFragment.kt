package com.ayogeshwaran.malwareappdetector.ui.home

import android.content.pm.ApplicationInfo
import android.content.pm.PackageInfo
import android.content.pm.PackageManager
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProviders
import com.ayogeshwaran.malwareappdetector.R
import kotlinx.android.synthetic.main.fragment_home.*
import kotlinx.coroutines.*
import java.net.HttpURLConnection
import java.net.URL

const val playstoreBaseUrl = "https://play.google.com/store/apps/details?id="

class HomeFragment : Fragment() {

    private lateinit var homeViewModel: HomeViewModel

    override fun onCreateView(
            inflater: LayoutInflater,
            container: ViewGroup?,
            savedInstanceState: Bundle?
    ): View? {
        homeViewModel =
                ViewModelProviders.of(this).get(HomeViewModel::class.java)
        return inflater.inflate(R.layout.fragment_home, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        val allApps = getLegibleApps()
        text_home.text = allApps
    }

    private fun getLegibleApps() : String {
        val pm: PackageManager = requireContext().packageManager
        val packages = pm.getInstalledPackages(0)
        val names = StringBuilder()
        packages.forEach {
            if (it.packageName != null && it.packageName.isNotEmpty() && !isSystemApp(it)) {
                val response = pingUrl(playstoreBaseUrl + it.packageName)
                names.append("\n ${it.packageName} - $response")
            }
        }
        return names.toString()
    }

    private fun isSystemApp(it: PackageInfo) : Boolean {
        return (it.applicationInfo.flags and ApplicationInfo.FLAG_SYSTEM) > 0
    }

    private fun pingUrl(url: String) : String = runBlocking {
        withContext(Dispatchers.IO) {
            hitUrl(url)
        }
    }

    private fun hitUrl(url: String) : String {
        val urlObj = URL(url)
        val connection = urlObj.openConnection() as HttpURLConnection
        return connection.responseCode.toString()
    }
}